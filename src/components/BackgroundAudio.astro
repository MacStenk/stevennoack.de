---
/**
 * Background Audio Component - Muted Autoplay Version
 * @description Ambient background music with muted autoplay and unmute controls
 */
interface Props {
  audioUrl: string;
  initialVolume?: number;
}

const {
  audioUrl,
  initialVolume = 0.15, // 15% Volume when unmuted
} = Astro.props;
---

<div class="audio-controls" id="audio-controls">
  <button id="mute-toggle" class="audio-btn pulse" aria-label="Unmute/Mute">
    <span class="icon muted-icon">ðŸ”‡</span>
    <span class="icon unmuted-icon" style="display: none;">ðŸ”Š</span>
  </button>

  <div class="volume-control" id="volume-control" style="display: none;">
    <input
      type="range"
      id="volume-slider"
      class="volume-slider"
      min="0"
      max="100"
      value={initialVolume * 100}
      aria-label="Volume"
    />
    <span id="volume-value" class="volume-value"
      >{Math.round(initialVolume * 100)}%</span
    >
  </div>

  <div class="audio-hint" id="audio-hint">
    <span class="hint-text">Click to enable sound</span>
  </div>
</div>

<audio
  id="background-audio"
  loop
  preload="auto"
  muted
  data-initial-volume={initialVolume}
>
  <source src={audioUrl} type="audio/mpeg" />
  Your browser does not support the audio element.
</audio>

<style>
  .audio-controls {
    position: fixed;
    bottom: 2rem; /* Abstand von unten */
    right: 2rem; /* Abstand von rechts */
    /* FÃ¼r links: */
    /* left: 2rem; */
    /* right: auto; */
    display: flex;
    align-items: center;
    gap: 1rem;
    background: rgba(0, 20, 0, 0.95);
    border: 1px solid var(--matrix-green);
    border-radius: 8px;
    padding: 0.8rem 1.2rem;
    box-shadow: 0 0 20px rgba(0, 255, 65, 0.3);
    z-index: 1000;
    backdrop-filter: blur(10px);
  }

  .audio-btn {
    background: none;
    border: 1px solid var(--matrix-green);
    color: var(--matrix-green);
    width: 44px;
    height: 44px;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    font-size: 20px;
    position: relative;
  }

  .audio-btn:hover {
    background: rgba(0, 255, 65, 0.1);
    box-shadow: 0 0 15px rgba(0, 255, 65, 0.6);
  }

  .audio-btn:active {
    transform: scale(0.95);
  }

  /* Pulse Animation fÃ¼r Unmute Button */
  .audio-btn.pulse {
    animation: pulse 2s ease-in-out infinite;
  }

  @keyframes pulse {
    0%,
    100% {
      box-shadow: 0 0 10px rgba(0, 255, 65, 0.4);
    }
    50% {
      box-shadow: 0 0 20px rgba(0, 255, 65, 0.7);
    }
  }

  .audio-btn.pulse::after {
    content: "";
    position: absolute;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    border: 2px solid var(--matrix-green);
    animation: ripple 2s ease-out infinite;
  }

  @keyframes ripple {
    0% {
      transform: scale(1);
      opacity: 1;
    }
    100% {
      transform: scale(1.5);
      opacity: 0;
    }
  }

  .icon {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .audio-hint {
    font-family: "Courier New", monospace;
    color: var(--matrix-green);
    font-size: 12px;
    white-space: nowrap;
    opacity: 0.9;
    animation: hint-fade 3s ease-in-out infinite;
  }

  @keyframes hint-fade {
    0%,
    100% {
      opacity: 0.6;
    }
    50% {
      opacity: 1;
    }
  }

  .volume-control {
    display: flex;
    align-items: center;
    gap: 0.8rem;
    animation: slideIn 0.3s ease-out;
  }

  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateX(-10px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  .volume-slider {
    width: 100px;
    height: 4px;
    -webkit-appearance: none;
    appearance: none;
    background: rgba(0, 255, 65, 0.2);
    border-radius: 2px;
    outline: none;
    cursor: pointer;
  }

  .volume-slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 14px;
    height: 14px;
    background: var(--matrix-green);
    border-radius: 50%;
    cursor: pointer;
    box-shadow: 0 0 5px rgba(0, 255, 65, 0.8);
  }

  .volume-slider::-moz-range-thumb {
    width: 14px;
    height: 14px;
    background: var(--matrix-green);
    border-radius: 50%;
    cursor: pointer;
    border: none;
    box-shadow: 0 0 5px rgba(0, 255, 65, 0.8);
  }

  .volume-slider:hover::-webkit-slider-thumb {
    box-shadow: 0 0 10px rgba(0, 255, 65, 1);
  }

  .volume-slider:hover::-moz-range-thumb {
    box-shadow: 0 0 10px rgba(0, 255, 65, 1);
  }

  .volume-value {
    font-family: "Courier New", monospace;
    color: var(--matrix-green);
    font-size: 12px;
    min-width: 35px;
    text-align: right;
  }

  @media (max-width: 768px) {
    .audio-controls {
      bottom: 1rem;
      right: 1rem;
      padding: 0.6rem 1rem;
      gap: 0.8rem;
    }

    .audio-btn {
      width: 40px;
      height: 40px;
      font-size: 18px;
    }

    .audio-hint {
      font-size: 11px;
    }

    .volume-slider {
      width: 80px;
    }
  }

  @media (max-width: 480px) {
    .audio-controls {
      flex-direction: column;
      gap: 0.6rem;
      padding: 0.8rem;
    }

    .volume-control {
      width: 100%;
      justify-content: space-between;
    }

    .volume-slider {
      flex: 1;
    }

    .audio-hint {
      font-size: 10px;
    }
  }
</style>

<script>
  // Muted Autoplay Audio Controls
  const audio = document.getElementById("background-audio") as HTMLAudioElement;
  const muteToggleBtn = document.getElementById("mute-toggle");
  const mutedIcon = document.querySelector(".muted-icon") as HTMLElement;
  const unmutedIcon = document.querySelector(".unmuted-icon") as HTMLElement;
  const volumeControl = document.getElementById(
    "volume-control"
  ) as HTMLElement;
  const audioHint = document.getElementById("audio-hint") as HTMLElement;
  const volumeSlider = document.getElementById(
    "volume-slider"
  ) as HTMLInputElement;
  const volumeValue = document.getElementById("volume-value") as HTMLElement;

  if (audio && muteToggleBtn && volumeSlider) {
    const initialVolume = parseFloat(audio.dataset.initialVolume || "0.15");
    let isMuted = true;

    // Start muted autoplay
    audio.muted = true;
    audio.volume = initialVolume;

    // Try to start playback (muted autoplay is always allowed)
    const playPromise = audio.play();

    if (playPromise !== undefined) {
      playPromise.catch(() => {
        console.log("Autoplay failed, waiting for user interaction");
      });
    }

    // Mute/Unmute toggle
    muteToggleBtn.addEventListener("click", () => {
      if (isMuted) {
        // Unmute
        audio.muted = false;
        isMuted = false;

        // Update UI
        mutedIcon.style.display = "none";
        unmutedIcon.style.display = "flex";
        muteToggleBtn.classList.remove("pulse");
        volumeControl.style.display = "flex";
        audioHint.style.display = "none";

        // Ensure audio is playing
        if (audio.paused) {
          audio.play();
        }
      } else {
        // Mute
        audio.muted = true;
        isMuted = true;

        // Update UI
        mutedIcon.style.display = "flex";
        unmutedIcon.style.display = "none";
        muteToggleBtn.classList.add("pulse");
        volumeControl.style.display = "none";
        audioHint.style.display = "block";
      }
    });

    // Volume control
    volumeSlider.addEventListener("input", (e) => {
      const target = e.target as HTMLInputElement;
      const volume = parseInt(target.value) / 100;
      audio.volume = volume;
      volumeValue.textContent = `${target.value}%`;
    });

    // Hide hint after 10 seconds if still muted
    setTimeout(() => {
      if (isMuted && audioHint) {
        audioHint.style.transition = "opacity 1s ease-out";
        audioHint.style.opacity = "0";
        setTimeout(() => {
          if (isMuted) {
            audioHint.style.display = "none";
          }
        }, 1000);
      }
    }, 10000);
  }
</script>
